/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import com.maxel.ati.tp.DrawingContainer;
import com.maxel.ati.tp.EasyImage;
import com.maxel.ati.tp.LeclercBD;
import com.maxel.ati.tp.LorentzBD;
import com.maxel.ati.tp.Mask;
import com.maxel.ati.tp.ModuleFunction;
import com.maxel.ati.tp.Panel;
import com.maxel.ati.tp.TrackingDialog;
import com.maxel.ati.tp.Window;
import com.xuggle.xuggler.Global;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IContainer;
import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IPixelFormat;
import com.xuggle.xuggler.IStream;
import com.xuggle.xuggler.IStreamCoder;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.IVideoResampler;
import com.xuggle.xuggler.video.ConverterFactory;
import com.xuggle.xuggler.video.IConverter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import mpi.cbg.fly.Feature;
import mpi.cbg.fly.SIFT;

/**
 *
 * @author maximo
 */
public class MainJFrame extends javax.swing.JFrame {
    final AtomicInteger toIgnore = new AtomicInteger(50);
    EasyImage img1 = null;
    EasyImage img2 = null;
    public Window w;
    public Panel panel;
    boolean firstCall = true;
    BufferedImage currentImage;
    private Object lock = "";
    private BlockingQueue<BufferedImage> frames = new LinkedBlockingQueue<BufferedImage>(10);

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        LoadImg1 = new javax.swing.JMenuItem();
        Circle = new javax.swing.JMenuItem();
        Square = new javax.swing.JMenuItem();
        ColorDegradee = new javax.swing.JMenuItem();
        BWDegradee = new javax.swing.JMenuItem();
        Gauss = new javax.swing.JMenuItem();
        Rayleigh = new javax.swing.JMenuItem();
        Exponential = new javax.swing.JMenuItem();
        JMenu8 = new javax.swing.JMenu();
        LoadImg2 = new javax.swing.JMenuItem();
        Circle2 = new javax.swing.JMenuItem();
        Square2 = new javax.swing.JMenuItem();
        ColorDegradee2 = new javax.swing.JMenuItem();
        BWDegradee2 = new javax.swing.JMenuItem();
        Copy2To1 = new javax.swing.JMenuItem();
        SwapImgs = new javax.swing.JMenuItem();
        Save1 = new javax.swing.JMenuItem();
        Save2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        Show1 = new javax.swing.JMenuItem();
        toGrey1 = new javax.swing.JMenuItem();
        NegativeImg1 = new javax.swing.JMenuItem();
        Normalize1 = new javax.swing.JMenuItem();
        GenHistorgram1 = new javax.swing.JMenuItem();
        Multiply1 = new javax.swing.JMenuItem();
        DRC1 = new javax.swing.JMenuItem();
        Contrast1 = new javax.swing.JMenuItem();
        Umbral1 = new javax.swing.JMenuItem();
        Equalize1 = new javax.swing.JMenuItem();
        getSubImage = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        AddGauss = new javax.swing.JMenuItem();
        AddRayleigh = new javax.swing.JMenuItem();
        AddExponential = new javax.swing.JMenuItem();
        SaltNPepper = new javax.swing.JMenuItem();
        SaltNPepperBW = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        Mean = new javax.swing.JMenuItem();
        MedianFilter = new javax.swing.JMenuItem();
        BorderAmp = new javax.swing.JMenuItem();
        GaussianFilter = new javax.swing.JMenuItem();
        Roberts = new javax.swing.JMenuItem();
        Prewits = new javax.swing.JMenuItem();
        Sobel = new javax.swing.JMenuItem();
        Laplace = new javax.swing.JMenuItem();
        LocalVarianceEval = new javax.swing.JMenuItem();
        LaplaceGaussian = new javax.swing.JMenuItem();
        ZeroCross = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        SevenA = new javax.swing.JMenuItem();
        SevenAh = new javax.swing.JMenuItem();
        SevenAV = new javax.swing.JMenuItem();
        Kirsh = new javax.swing.JMenuItem();
        SevenC = new javax.swing.JMenuItem();
        SevenD = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        GlobalUmbralization = new javax.swing.JMenuItem();
        Otsu = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        LeclercAD = new javax.swing.JMenuItem();
        LorentzAD = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        NoMaxSupress = new javax.swing.JMenuItem();
        HistUmbral = new javax.swing.JMenuItem();
        Canny = new javax.swing.JMenuItem();
        SusanBorders = new javax.swing.JMenuItem();
        SusanCorners = new javax.swing.JMenuItem();
        SusanBoth = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        HoughLines = new javax.swing.JMenuItem();
        HoughTransformCicles = new javax.swing.JMenuItem();
        jMenu16 = new javax.swing.JMenu();
        trackingImage = new javax.swing.JMenuItem();
        trackingVideo = new javax.swing.JMenuItem();
        harrisCorners = new javax.swing.JMenuItem();
        singleSIFT = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        Show2 = new javax.swing.JMenuItem();
        toGrey2 = new javax.swing.JMenuItem();
        NegativeImg2 = new javax.swing.JMenuItem();
        Normalize2 = new javax.swing.JMenuItem();
        GenHistorgram2 = new javax.swing.JMenuItem();
        Multiply2 = new javax.swing.JMenuItem();
        DRC2 = new javax.swing.JMenuItem();
        Contrast2 = new javax.swing.JMenuItem();
        Umbral2 = new javax.swing.JMenuItem();
        Equalize2 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        Suma = new javax.swing.JMenuItem();
        Resta12 = new javax.swing.JMenuItem();
        Resta21 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        jMenu8.setText("jMenu8");

        jMenuItem5.setText("jMenuItem5");

        jMenu12.setText("jMenu12");

        jMenuItem9.setText("jMenuItem9");

        jMenuItem8.setText("jMenuItem8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu2.setText("File");

        jMenu7.setText("Image 1");

        LoadImg1.setText("File...");
        LoadImg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadImg1ActionPerformed(evt);
            }
        });
        jMenu7.add(LoadImg1);

        Circle.setText("Circle");
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });
        jMenu7.add(Circle);

        Square.setText("Square");
        Square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareActionPerformed(evt);
            }
        });
        jMenu7.add(Square);

        ColorDegradee.setText("Color Degradee");
        ColorDegradee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorDegradeeActionPerformed(evt);
            }
        });
        jMenu7.add(ColorDegradee);

        BWDegradee.setText("B&W Degradee");
        BWDegradee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BWDegradeeActionPerformed(evt);
            }
        });
        jMenu7.add(BWDegradee);

        Gauss.setText("Gauss");
        Gauss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussActionPerformed(evt);
            }
        });
        jMenu7.add(Gauss);

        Rayleigh.setText("Rayleigh");
        Rayleigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RayleighActionPerformed(evt);
            }
        });
        jMenu7.add(Rayleigh);

        Exponential.setText("Exponential");
        Exponential.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExponentialActionPerformed(evt);
            }
        });
        jMenu7.add(Exponential);

        jMenu2.add(jMenu7);

        JMenu8.setText("Image 2");

        LoadImg2.setText("File...");
        LoadImg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadImg2ActionPerformed(evt);
            }
        });
        JMenu8.add(LoadImg2);

        Circle2.setText("Circle");
        Circle2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Circle2ActionPerformed(evt);
            }
        });
        JMenu8.add(Circle2);

        Square2.setText("Square");
        Square2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Square2ActionPerformed(evt);
            }
        });
        JMenu8.add(Square2);

        ColorDegradee2.setText("Color Degradee");
        ColorDegradee2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorDegradee2ActionPerformed(evt);
            }
        });
        JMenu8.add(ColorDegradee2);

        BWDegradee2.setText("B&W Degradee");
        BWDegradee2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BWDegradee2ActionPerformed(evt);
            }
        });
        JMenu8.add(BWDegradee2);

        jMenu2.add(JMenu8);

        Copy2To1.setText("Copy img2 to 1");
        Copy2To1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Copy2To1ActionPerformed(evt);
            }
        });
        jMenu2.add(Copy2To1);

        SwapImgs.setText("Swap img1 & 2");
        SwapImgs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwapImgsActionPerformed(evt);
            }
        });
        jMenu2.add(SwapImgs);

        Save1.setText("Save img 1");
        Save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save1ActionPerformed(evt);
            }
        });
        jMenu2.add(Save1);

        Save2.setText("Save img 2");
        Save2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save2ActionPerformed(evt);
            }
        });
        jMenu2.add(Save2);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Edit img 1");

        Show1.setText("Show");
        Show1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show1ActionPerformed(evt);
            }
        });
        jMenu4.add(Show1);

        toGrey1.setText("To Grey");
        toGrey1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toGrey1ActionPerformed(evt);
            }
        });
        jMenu4.add(toGrey1);

        NegativeImg1.setText("Negative");
        NegativeImg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeImg1ActionPerformed(evt);
            }
        });
        jMenu4.add(NegativeImg1);

        Normalize1.setText("Normalize");
        Normalize1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Normalize1ActionPerformed(evt);
            }
        });
        jMenu4.add(Normalize1);

        GenHistorgram1.setText("Histogram");
        GenHistorgram1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenHistorgram1ActionPerformed(evt);
            }
        });
        jMenu4.add(GenHistorgram1);

        Multiply1.setText("Multiply");
        Multiply1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Multiply1ActionPerformed(evt);
            }
        });
        jMenu4.add(Multiply1);

        DRC1.setText("DRC");
        DRC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DRC1ActionPerformed(evt);
            }
        });
        jMenu4.add(DRC1);

        Contrast1.setText("Contrast...");
        Contrast1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Contrast1ActionPerformed(evt);
            }
        });
        jMenu4.add(Contrast1);

        Umbral1.setText("Umbral");
        Umbral1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Umbral1ActionPerformed(evt);
            }
        });
        jMenu4.add(Umbral1);

        Equalize1.setText("Equalize");
        Equalize1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Equalize1ActionPerformed(evt);
            }
        });
        jMenu4.add(Equalize1);

        getSubImage.setText("SubImage a img 2");
        getSubImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSubImageActionPerformed(evt);
            }
        });
        jMenu4.add(getSubImage);

        jMenu3.setText("Add Noise");

        AddGauss.setText("Gauss");
        AddGauss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddGaussActionPerformed(evt);
            }
        });
        jMenu3.add(AddGauss);

        AddRayleigh.setText("Rayleigh");
        AddRayleigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRayleighActionPerformed(evt);
            }
        });
        jMenu3.add(AddRayleigh);

        AddExponential.setText("Exponential");
        AddExponential.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddExponentialActionPerformed(evt);
            }
        });
        jMenu3.add(AddExponential);

        SaltNPepper.setText("Salt & Pepper Color");
        SaltNPepper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaltNPepperActionPerformed(evt);
            }
        });
        jMenu3.add(SaltNPepper);

        SaltNPepperBW.setText("Salt & Pepper BW");
        SaltNPepperBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaltNPepperBWActionPerformed(evt);
            }
        });
        jMenu3.add(SaltNPepperBW);

        jMenu4.add(jMenu3);

        jMenu9.setText("Apply filter");

        Mean.setText("Mean...");
        Mean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeanActionPerformed(evt);
            }
        });
        jMenu9.add(Mean);

        MedianFilter.setText("Median...");
        MedianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedianFilterActionPerformed(evt);
            }
        });
        jMenu9.add(MedianFilter);

        BorderAmp.setText("Border Amp...");
        BorderAmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorderAmpActionPerformed(evt);
            }
        });
        jMenu9.add(BorderAmp);

        GaussianFilter.setText("GaussianFilter");
        GaussianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussianFilterActionPerformed(evt);
            }
        });
        jMenu9.add(GaussianFilter);

        Roberts.setText("Roberts");
        Roberts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RobertsActionPerformed(evt);
            }
        });
        jMenu9.add(Roberts);

        Prewits.setText("Prewits");
        Prewits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrewitsActionPerformed(evt);
            }
        });
        jMenu9.add(Prewits);

        Sobel.setText("Sobel");
        Sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SobelActionPerformed(evt);
            }
        });
        jMenu9.add(Sobel);

        Laplace.setText("Laplace");
        Laplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaplaceActionPerformed(evt);
            }
        });
        jMenu9.add(Laplace);

        LocalVarianceEval.setText("LocalVarianceEval");
        LocalVarianceEval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalVarianceEvalActionPerformed(evt);
            }
        });
        jMenu9.add(LocalVarianceEval);

        LaplaceGaussian.setText("Laplace Gaussian");
        LaplaceGaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaplaceGaussianActionPerformed(evt);
            }
        });
        jMenu9.add(LaplaceGaussian);

        ZeroCross.setText("Zero Cross");
        ZeroCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroCrossActionPerformed(evt);
            }
        });
        jMenu9.add(ZeroCross);

        jMenu4.add(jMenu9);

        jMenu10.setText("Punto 7");

        SevenA.setText("a)");
        SevenA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenAActionPerformed(evt);
            }
        });
        jMenu10.add(SevenA);

        SevenAh.setText("a) v");
        SevenAh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenAhActionPerformed(evt);
            }
        });
        jMenu10.add(SevenAh);

        SevenAV.setText("a) h");
        SevenAV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenAVActionPerformed(evt);
            }
        });
        jMenu10.add(SevenAV);

        Kirsh.setText("Kirsh");
        Kirsh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KirshActionPerformed(evt);
            }
        });
        jMenu10.add(Kirsh);

        SevenC.setText("c)");
        SevenC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenCActionPerformed(evt);
            }
        });
        jMenu10.add(SevenC);

        SevenD.setText("d)");
        SevenD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenDActionPerformed(evt);
            }
        });
        jMenu10.add(SevenD);

        jMenu4.add(jMenu10);

        jMenu11.setText("Umbralización");

        GlobalUmbralization.setText("Global");
        GlobalUmbralization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GlobalUmbralizationActionPerformed(evt);
            }
        });
        jMenu11.add(GlobalUmbralization);

        Otsu.setText("Otsu");
        Otsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtsuActionPerformed(evt);
            }
        });
        jMenu11.add(Otsu);

        jMenu4.add(jMenu11);

        jMenu13.setText("AnisotropicDifussion");

        jMenuItem6.setText("Isotropic");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem6);

        LeclercAD.setText("Leclerc");
        LeclercAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeclercADActionPerformed(evt);
            }
        });
        jMenu13.add(LeclercAD);

        LorentzAD.setText("Lorentz");
        LorentzAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LorentzADActionPerformed(evt);
            }
        });
        jMenu13.add(LorentzAD);

        jMenu4.add(jMenu13);

        jMenu14.setText("Border detector");

        NoMaxSupress.setText("No Max supress");
        NoMaxSupress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoMaxSupressActionPerformed(evt);
            }
        });
        jMenu14.add(NoMaxSupress);

        HistUmbral.setText("Histeresis umbral");
        HistUmbral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistUmbralActionPerformed(evt);
            }
        });
        jMenu14.add(HistUmbral);

        Canny.setText("Canny");
        Canny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CannyActionPerformed(evt);
            }
        });
        jMenu14.add(Canny);

        SusanBorders.setText("Susan Borders");
        SusanBorders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SusanBordersActionPerformed(evt);
            }
        });
        jMenu14.add(SusanBorders);

        SusanCorners.setText("Susan Corners");
        SusanCorners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SusanCornersActionPerformed(evt);
            }
        });
        jMenu14.add(SusanCorners);

        SusanBoth.setText("Susan Both");
        SusanBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SusanBothActionPerformed(evt);
            }
        });
        jMenu14.add(SusanBoth);

        jMenu4.add(jMenu14);

        jMenu15.setText("Hough Transform");

        HoughLines.setText("Lines");
        HoughLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoughLinesActionPerformed(evt);
            }
        });
        jMenu15.add(HoughLines);

        HoughTransformCicles.setText("Circles");
        HoughTransformCicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoughTransformCiclesActionPerformed(evt);
            }
        });
        jMenu15.add(HoughTransformCicles);

        jMenu4.add(jMenu15);

        jMenu16.setText("Tracking");

        trackingImage.setText("image");
        trackingImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackingImageActionPerformed(evt);
            }
        });
        jMenu16.add(trackingImage);

        trackingVideo.setText("video");
        trackingVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackingVideoActionPerformed(evt);
            }
        });
        jMenu16.add(trackingVideo);

        jMenu4.add(jMenu16);

        harrisCorners.setText("Harris Corners");
        harrisCorners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harrisCornersActionPerformed(evt);
            }
        });
        jMenu4.add(harrisCorners);

        singleSIFT.setText("SIFT");
        singleSIFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleSIFTActionPerformed(evt);
            }
        });
        jMenu4.add(singleSIFT);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Edit img 2");

        Show2.setText("Show");
        Show2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show2ActionPerformed(evt);
            }
        });
        jMenu5.add(Show2);

        toGrey2.setText("To Grey");
        toGrey2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toGrey2ActionPerformed(evt);
            }
        });
        jMenu5.add(toGrey2);

        NegativeImg2.setText("Negative");
        NegativeImg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeImg2ActionPerformed(evt);
            }
        });
        jMenu5.add(NegativeImg2);

        Normalize2.setText("Normalize");
        Normalize2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Normalize2ActionPerformed(evt);
            }
        });
        jMenu5.add(Normalize2);

        GenHistorgram2.setText("Histogram");
        GenHistorgram2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenHistorgram2ActionPerformed(evt);
            }
        });
        jMenu5.add(GenHistorgram2);

        Multiply2.setText("Multiply");
        Multiply2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Multiply2ActionPerformed(evt);
            }
        });
        jMenu5.add(Multiply2);

        DRC2.setText("DRC");
        DRC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DRC2ActionPerformed(evt);
            }
        });
        jMenu5.add(DRC2);

        Contrast2.setText("Contrast...");
        Contrast2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Contrast2ActionPerformed(evt);
            }
        });
        jMenu5.add(Contrast2);

        Umbral2.setText("Umbral");
        Umbral2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Umbral2ActionPerformed(evt);
            }
        });
        jMenu5.add(Umbral2);

        Equalize2.setText("Equalize");
        Equalize2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Equalize2ActionPerformed(evt);
            }
        });
        jMenu5.add(Equalize2);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Edit img 1 and 2");

        Suma.setText("Suma");
        Suma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumaActionPerformed(evt);
            }
        });
        jMenu6.add(Suma);

        Resta12.setText("Resta 1 - 2");
        Resta12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resta12ActionPerformed(evt);
            }
        });
        jMenu6.add(Resta12);

        Resta21.setText("Resta 2 - 1");
        Resta21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resta21ActionPerformed(evt);
            }
        });
        jMenu6.add(Resta21);

        jMenuItem7.setText("jMenuItem7");
        jMenu6.add(jMenuItem7);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 633, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 424, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadImg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadImg1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(new ImgFileFilter());


//In response to a button click:
        fc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                BufferedImage img = null;
                try {
                    img = ImageIO.read(fc.getSelectedFile());
                    img1 = new EasyImage(img);
                    img1.toGrey();
                    img2 = new EasyImage(img1.getBufferedImage());
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        fc.showOpenDialog(LoadImg1);

    }//GEN-LAST:event_LoadImg1ActionPerformed

    private void NegativeImg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeImg1ActionPerformed
        img1.applyNegative();
        img1.updateImg();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_NegativeImg1ActionPerformed

    private void SumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumaActionPerformed
        img1.add(img2);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SumaActionPerformed

    private void Resta12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resta12ActionPerformed
        img1.substract(img2);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Resta12ActionPerformed

    private void Save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save1ActionPerformed
        String fileName, type;
        fileName = JOptionPane.showInputDialog("File name: ");
        System.out.println("Se guarda el archivo: " + fileName);
        String[] aux = fileName.split("\\.");
//        String t="";
//        for(String a:aux){
//            t=a;
//        }
//        System.out.println("Se guarda el archivo: " + t);
//        
        type = aux[aux.length > 0 ? aux.length - 1 : aux.length];
//        type = "png";
        try {
            // retrieve image
            BufferedImage bi = img1.getBufferedImage();
            File outputfile = new File("./" + fileName);
            ImageIO.write(bi, type, outputfile);
        } catch (IOException e) {
        }
    }//GEN-LAST:event_Save1ActionPerformed

    private void Normalize1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Normalize1ActionPerformed
        img1.normalize();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Normalize1ActionPerformed

    private void Show1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show1ActionPerformed
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Show1ActionPerformed

    private void Resta21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resta21ActionPerformed
        img2.substract(img1);
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Resta21ActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        img1 = EasyImage.newCircle(100, 100);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_CircleActionPerformed

    private void SquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareActionPerformed
        img1 = EasyImage.newSquare(200, 200);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SquareActionPerformed

    private void ColorDegradeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorDegradeeActionPerformed
        img1 = EasyImage.newColorDegradee(200, 200, Color.red.getRGB(), Color.white.getRGB());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_ColorDegradeeActionPerformed

    private void BWDegradeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BWDegradeeActionPerformed
        img1 = EasyImage.newColorDegradee(200, 200, Color.white.getRGB(), Color.black.getRGB());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_BWDegradeeActionPerformed

    private void GenHistorgram1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenHistorgram1ActionPerformed
        displayImage(EasyImage.generateHistogram(img1));
    }//GEN-LAST:event_GenHistorgram1ActionPerformed

    private void Multiply1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Multiply1ActionPerformed
        int factor = Integer.valueOf(JOptionPane.showInputDialog("Factor: "));
        img1.multiply(factor);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Multiply1ActionPerformed

    private void DRC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DRC1ActionPerformed
        img1.dynamicRangeCompress();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_DRC1ActionPerformed

    private void Contrast1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Contrast1ActionPerformed
        final JFrame frame = new JFrame();
//        frame.getContentPane().add(lblimage, BorderLayout.CENTER);
//        frame.setSize(img.getWidth(), img.getHeight());
        frame.setVisible(true);
        frame.setTitle("Añadir contraste");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Valores en eje r"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Valores en eje y"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("r1 = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("r2 = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("y1 = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JLabel newR2Label = new JLabel("y2 = ");
        final JTextField y2Field = new JTextField("0");
        y2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int r1;
                int r2;
                int y1;
                int y2;

                try {
                    r1 = Integer.valueOf(r1Field.getText());
                    r2 = Integer.valueOf(r2Field.getText());
                    y1 = Integer.valueOf(y1Field.getText());
                    y2 = Integer.valueOf(y2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }

                if (!(r1 > y1) || !(r2 < y2)) {
                    System.out.println("r1 debe ser menor a y1, y r2 menor a y2");
                    return;
                }
                img1.applyContrast(r1, r2, y1, y2);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);
        pan2.add(newR2Label);
        pan2.add(y2Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);

    }//GEN-LAST:event_Contrast1ActionPerformed

    private void Umbral1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Umbral1ActionPerformed
        int umbral = Integer.valueOf(JOptionPane.showInputDialog("Umbral: "));
        img1.umbral(umbral);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Umbral1ActionPerformed

    private void LoadImg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadImg2ActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(new ImgFileFilter());


//In response to a button click:
        fc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                BufferedImage img = null;
                try {
                    img = ImageIO.read(fc.getSelectedFile());
                    img2 = new EasyImage(img);
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        fc.showOpenDialog(LoadImg2);

    }//GEN-LAST:event_LoadImg2ActionPerformed

    private void Circle2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Circle2ActionPerformed
        img2 = EasyImage.newCircle(200, 200);
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Circle2ActionPerformed

    private void Square2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Square2ActionPerformed
        img2 = EasyImage.newSquare(200, 200);
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Square2ActionPerformed

    private void ColorDegradee2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorDegradee2ActionPerformed
        img2 = EasyImage.newColorDegradee(200, 200, Color.red.getRGB(), Color.white.getRGB());
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_ColorDegradee2ActionPerformed

    private void BWDegradee2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BWDegradee2ActionPerformed
        img2 = EasyImage.newColorDegradee(200, 200, Color.white.getRGB(), Color.black.getRGB());
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_BWDegradee2ActionPerformed

    private void Save2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save2ActionPerformed
        String fileName, type;
        fileName = JOptionPane.showInputDialog("File name: ");
        System.out.println("Se guarda el archivo: " + fileName);
        String[] aux = fileName.split("\\.");
//        String t="";
//        for(String a:aux){
//            t=a;
//        }
//        System.out.println("Se guarda el archivo: " + t);
//        
        type = aux[aux.length > 0 ? aux.length - 1 : aux.length];
//        type = "png";
        try {
            // retrieve image
            BufferedImage bi = img2.getBufferedImage();
            File outputfile = new File("./" + fileName);
            ImageIO.write(bi, type, outputfile);
        } catch (IOException e) {
        }
    }//GEN-LAST:event_Save2ActionPerformed

    private void Show2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show2ActionPerformed
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Show2ActionPerformed

    private void Umbral2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Umbral2ActionPerformed
        int umbral = Integer.valueOf(JOptionPane.showInputDialog("Umbral: "));
        img2.umbral(umbral);
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Umbral2ActionPerformed

    private void NegativeImg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeImg2ActionPerformed
        img2.applyNegative();
        img2.updateImg();
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_NegativeImg2ActionPerformed

    private void Normalize2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Normalize2ActionPerformed
        img2.normalize();
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Normalize2ActionPerformed

    private void GenHistorgram2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenHistorgram2ActionPerformed
        displayImage(EasyImage.generateHistogram(img2));
    }//GEN-LAST:event_GenHistorgram2ActionPerformed

    private void Multiply2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Multiply2ActionPerformed
        int factor = Integer.valueOf(JOptionPane.showInputDialog("Factor: "));
        img2.multiply(factor);
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Multiply2ActionPerformed

    private void DRC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DRC2ActionPerformed
        img2.dynamicRangeCompress();
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_DRC2ActionPerformed

    private void Contrast2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Contrast2ActionPerformed
        final JFrame frame = new JFrame();
//        frame.getContentPane().add(lblimage, BorderLayout.CENTER);
//        frame.setSize(img.getWidth(), img.getHeight());
        frame.setVisible(true);
        frame.setTitle("Añadir contraste");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Valores en eje r"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Valores en eje y"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("r1 = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("r2 = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("y1 = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JLabel newR2Label = new JLabel("y2 = ");
        final JTextField y2Field = new JTextField("0");
        y2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int r1;
                int r2;
                int y1;
                int y2;

                try {
                    r1 = Integer.valueOf(r1Field.getText());
                    r2 = Integer.valueOf(r2Field.getText());
                    y1 = Integer.valueOf(y1Field.getText());
                    y2 = Integer.valueOf(y2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }

                if (!(r1 > y1) || !(r2 < y2)) {
                    System.out.println("r1 debe ser menor a y1, y r2 menor a y2");
                    return;
                }
                img2.applyContrast(r1, r2, y1, y2);
                displayImage(img2.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);
        pan2.add(newR2Label);
        pan2.add(y2Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);

    }//GEN-LAST:event_Contrast2ActionPerformed

    private void toGrey1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toGrey1ActionPerformed
        img1.toGrey();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_toGrey1ActionPerformed

    private void toGrey2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toGrey2ActionPerformed
        img2.toGrey();
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_toGrey2ActionPerformed

    private void Equalize1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Equalize1ActionPerformed
        img1.equalize();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_Equalize1ActionPerformed

    private void Equalize2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Equalize2ActionPerformed
        img2.equalize();
        displayImage(img2.getBufferedImage());
    }//GEN-LAST:event_Equalize2ActionPerformed

    private void getSubImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSubImageActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Obtener imagen interna");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Valores de esquina superior izq."));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Valores de esqina inferior derecha."));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("x1 = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("y1 = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("x2 = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JLabel newR2Label = new JLabel("y2 = ");
        final JTextField y2Field = new JTextField("0");
        y2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;
                int x2;
                int y2;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());
                    x2 = Integer.valueOf(y1Field.getText());
                    y2 = Integer.valueOf(y2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }

                if (!(x1 < x2) || !(y1 < y2)) {
                    System.out.println("La esquina inferior derecha es incorrecta");
                    return;
                }
                img2 = img1.getSubImage(x1, y1, x2, y2);
                displayImage(img2.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);
        pan2.add(newR2Label);
        pan2.add(y2Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);

    }//GEN-LAST:event_getSubImageActionPerformed

    private void RayleighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RayleighActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Obtener imagen interna");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Tamaño:"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Propiedad"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("epsilon = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;
                double x2;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());
                    x2 = Double.valueOf(y1Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1 = EasyImage.newRayleigh(x1, y1, x2);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);



    }//GEN-LAST:event_RayleighActionPerformed

    private void GaussActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Obtener imagen interna");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Tamaño"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("media = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JLabel newR2Label = new JLabel("sigma = ");
        final JTextField y2Field = new JTextField("0");
        y2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;
                double x2;
                double y2;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());
                    x2 = Double.valueOf(y1Field.getText());
                    y2 = Double.valueOf(y2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1 = EasyImage.newGauss(x1, y1, x2, y2);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);
        pan2.add(newR2Label);
        pan2.add(y2Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);

    }//GEN-LAST:event_GaussActionPerformed

    private void ExponentialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExponentialActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Obtener imagen interna");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Tamaño:"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Propiedad"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("lambda = ");
        final JTextField y1Field = new JTextField("0");
        y1Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;
                double x2;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());
                    x2 = Double.valueOf(y1Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1 = EasyImage.newExponential(x1, y1, x2);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);




    }//GEN-LAST:event_ExponentialActionPerformed

    private void AddGaussActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddGaussActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Agregar Ruido gausseano:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("mu = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("sigma = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                double x1;
                double y1;

                try {
                    x1 = Double.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                EasyImage gaussNoise = EasyImage.newGauss(img1.getWidth(), img1.getHeight(), x1, y1);
                img1.addNoise(gaussNoise);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);


    }//GEN-LAST:event_AddGaussActionPerformed

    private void AddExponentialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddExponentialActionPerformed
        double lambda = Double.valueOf(JOptionPane.showInputDialog("lambda: "));
        EasyImage expnoise = EasyImage.newExponential(img1.getWidth(), img1.getHeight(), lambda);
        img1.multiplyNoise(expnoise);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_AddExponentialActionPerformed

    private void AddRayleighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRayleighActionPerformed
        double epsilon = Double.valueOf(JOptionPane.showInputDialog("epsilon: "));
        EasyImage raynoise = EasyImage.newRayleigh(img1.getWidth(), img1.getHeight(), epsilon);
        img1.multiplyNoise(raynoise);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_AddRayleighActionPerformed

    private void SaltNPepperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaltNPepperActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Agregar Salt and Pepper:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("densidad = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("pSalt = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                double x1;
                double y1;

                try {
                    x1 = Double.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.addSaltNPepperColor(x1, y1);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_SaltNPepperActionPerformed

    private void SaltNPepperBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaltNPepperBWActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Agregar Salt and Pepper:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("densidad = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("pSalt = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                double x1;
                double y1;

                try {
                    x1 = Double.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.addSaltNPepper(x1, y1);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_SaltNPepperBWActionPerformed

    private void MedianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedianFilterActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyMedianMask(x1, y1);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_MedianFilterActionPerformed

    private void MeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeanActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyMask(Mask.newMeanFilter(x1, y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);
    }//GEN-LAST:event_MeanActionPerformed

    private void BorderAmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorderAmpActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("width = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("height = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyMask(Mask.newHighAmpFilter(x1, y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);
    }//GEN-LAST:event_BorderAmpActionPerformed

    private void SwapImgsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwapImgsActionPerformed
        EasyImage aux = img1;
        img1 = img2;
        img2 = aux;
    }//GEN-LAST:event_SwapImgsActionPerformed

    private void RobertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RobertsActionPerformed
        EasyImage aux = new EasyImage(img1.getBufferedImage());
        aux.applyMask(Mask.newDxRoberts());
        img1.applyMask(Mask.newDyRoberts());
        img1.module(aux);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_RobertsActionPerformed

    private void PrewitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrewitsActionPerformed
        int width = Integer.valueOf(JOptionPane.showInputDialog("Size: "));
        EasyImage aux = new EasyImage(img1.getBufferedImage());
        aux.applyMask(Mask.newDxPrewitt(width));
        img1.applyMask(Mask.newDyPrewitt(width));
        img1.module(aux);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_PrewitsActionPerformed

    private void SobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SobelActionPerformed
        EasyImage aux = new EasyImage(img1.getBufferedImage());
        aux.applyMask(Mask.newDxSobel());
        img1.applyMask(Mask.newDySobel());
        img1.applyFunction(new ModuleFunction(), aux);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SobelActionPerformed

    private void SevenAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenAActionPerformed

        Mask m = Mask.newDxSevenA();
        img1.applyDirectionalMask(m);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SevenAActionPerformed

    private void KirshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KirshActionPerformed
        img1.applyDirectionalMask(Mask.newDxKirsh());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_KirshActionPerformed

    private void SevenCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenCActionPerformed
        img1.applyDirectionalMask(Mask.newDxSevenC());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SevenCActionPerformed

    private void SevenDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenDActionPerformed
        img1.applyDirectionalMask(Mask.newDxSevenD());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SevenDActionPerformed

    private void LaplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaplaceActionPerformed
        img1.applyMask(Mask.newLaplace());
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_LaplaceActionPerformed

    private void LocalVarianceEvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalVarianceEvalActionPerformed
        Double var = Double.valueOf(JOptionPane.showInputDialog("Variance: "));
        img1.applyLocalVarianceEval(var);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_LocalVarianceEvalActionPerformed

    private void Copy2To1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Copy2To1ActionPerformed
        img1 = new EasyImage(img2.getBufferedImage());
    }//GEN-LAST:event_Copy2To1ActionPerformed

    private void LaplaceGaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaplaceGaussianActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("Tamaño = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("varianza = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                double y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyMask(Mask.newLaplaceGaussianMask(x1, y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_LaplaceGaussianActionPerformed

    private void ZeroCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroCrossActionPerformed
        Double var = Double.valueOf(JOptionPane.showInputDialog("Umbral: "));
        img1.applyZeroCrossing(var);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_ZeroCrossActionPerformed

    private void GlobalUmbralizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GlobalUmbralizationActionPerformed
        img1.globalThreshold();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_GlobalUmbralizationActionPerformed

    private void OtsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OtsuActionPerformed
        img1.otsuThreshold();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_OtsuActionPerformed

    private void LeclercADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeclercADActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("Iteraciones = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("varianza = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                double y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyAnisotropicDiffusion(x1, new LeclercBD(y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_LeclercADActionPerformed

    private void LorentzADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LorentzADActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("Iteraciones = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("varianza = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                double y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyAnisotropicDiffusion(x1, new LorentzBD(y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_LorentzADActionPerformed

    private void GaussianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussianFilterActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar filtro:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("tamaño = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("varianza = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                double y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Double.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyMask(Mask.newGaussianMask(x1, y1));
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);

    }//GEN-LAST:event_GaussianFilterActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        Integer var = Integer.valueOf(JOptionPane.showInputDialog("Iteraciones: "));
        img1.applyIsotropicDiffusion(var, null);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void SevenAVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenAVActionPerformed
        Mask m = Mask.newDxSevenA();
        img1.applyMask(m);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SevenAVActionPerformed

    private void SevenAhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenAhActionPerformed
        Mask m = Mask.newDxSevenA();
        m.rotate90();
        img1.applyMask(m);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SevenAhActionPerformed

    private void NoMaxSupressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoMaxSupressActionPerformed
        img1.applyNoMaxSupression();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_NoMaxSupressActionPerformed

    private void HistUmbralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistUmbralActionPerformed
        final JFrame frame = new JFrame();
        frame.setVisible(true);
        frame.setTitle("Aplicar Umbralización con Histéresis:");
        frame.setBounds(1, 1, 250, 150);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Propiedades:"));
        pan1.setBounds(0, 0, 250, 80);

        JLabel r1Label = new JLabel("t1 = ");
        final JTextField r1Field = new JTextField("0");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("t2 = ");
        final JTextField r2Field = new JTextField("0");
        r2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 80, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int x1;
                int y1;

                try {
                    x1 = Integer.valueOf(r1Field.getText());
                    y1 = Integer.valueOf(r2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }
                img1.applyHistUmbralization(x1, y1);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        frame.add(pan1);
        frame.add(okButton);


    }//GEN-LAST:event_HistUmbralActionPerformed

    private void CannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CannyActionPerformed
        img1.applyCanny();
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_CannyActionPerformed

    private void SusanBordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SusanBordersActionPerformed
        img1 = img1.applySusan(true, false, 0xFF0000);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SusanBordersActionPerformed

    private void SusanCornersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SusanCornersActionPerformed
        img1.applySusan(false, true, 0xFF0000);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SusanCornersActionPerformed

    private void SusanBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SusanBothActionPerformed
        img1.applySusan(true, true, 0xFF0000);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_SusanBothActionPerformed

    private void HoughLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoughLinesActionPerformed
        img1.houghLinesTransform(0.75, 0xFF0000);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_HoughLinesActionPerformed

    private void HoughTransformCiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoughTransformCiclesActionPerformed
        img1.houghCirclesTransform(0.75, 0xFF0000);
        displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_HoughTransformCiclesActionPerformed

    private void trackingImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackingImageActionPerformed
        Window w = new Window();
        final Panel panel = new Panel(w);
        panel.loadImage(img1);
        panel.repaint();

        w.getContentPane().add(panel, BorderLayout.CENTER);
        w.setSize(img1.getWidth() + 50, img1.getHeight() + 50);
        w.setVisible(true);
        w.setResizable(true);
        final TrackingDialog trackingDialog = new TrackingDialog(panel);
        trackingDialog.setOnClick(new Runnable() {
            public void run() {
                img1.tracking(trackingDialog.drawingContainer, panel, false);
            }
        });
        trackingDialog.setVisible(true);


    }//GEN-LAST:event_trackingImageActionPerformed

    private void trackingVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackingVideoActionPerformed
        final JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(this);
        w = new Window();
         panel = new Panel(w);
        w.getContentPane().add(panel, BorderLayout.CENTER);
        
        w.setVisible(true);
        w.setResizable(true);
       
        final IContainer container = IContainer.make();
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                File f = chooser.getSelectedFile();
                try {
                    String filename = f.getAbsoluteFile().getAbsolutePath();
                    if (container.open(filename, IContainer.Type.READ, null) < 0) {
                        throw new IllegalArgumentException("could not open file: " + filename);
                    }
                    

                    int numStreams = container.getNumStreams();
                    // and iterate through the streams to find the first video stream
                    int videoStreamId = -1;
                    IStreamCoder videoCoder = null;
                    for (int i = 0; i < numStreams; i++) {
                        // Find the stream object
                        IStream stream = container.getStream(i);
                        // Get the pre-configured decoder that can decode this stream;
                        IStreamCoder coder = stream.getStreamCoder();

                        if (coder.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO) {
                            videoStreamId = i;
                            videoCoder = coder;
                            break;
                        }
                    }
                    if (videoStreamId == -1) {
                        throw new RuntimeException("could not find video stream in container: "
                                + filename);
                    }

                    IConverter myConverter =
                            ConverterFactory.createConverter(ConverterFactory.XUGGLER_BGR_24,
                            IPixelFormat.Type.BGR24, videoCoder.getWidth(), videoCoder.getHeight());


                    /*
                     * Now we have found the video stream in this file.  Let's open up our decoder so it can
                     * do work.
                     */
                    if (videoCoder.open() < 0) {
                        throw new RuntimeException("could not open video decoder for container: "
                                + filename);
                    }

                    IVideoResampler resampler = null;
                    if (videoCoder.getPixelType() != IPixelFormat.Type.BGR24) {
                        // if this stream is not in BGR24, we're going to need to
                        // convert it.  The VideoResampler does that for us.
                        resampler = IVideoResampler.make(videoCoder.getWidth(),
                                videoCoder.getHeight(), IPixelFormat.Type.BGR24,
                                videoCoder.getWidth(), videoCoder.getHeight(), videoCoder.getPixelType());
                        if (resampler == null) {
                            throw new RuntimeException("could not create color space "
                                    + "resampler for: " + filename);
                        }
                    }

                    /*
                     * Now, we start walking through the container looking at each packet.
                     */
                    IPacket packet = IPacket.make();
                    long firstTimestampInStream = Global.NO_PTS;
                    long systemClockStartTime = 0;
                    
                    while (container.readNextPacket(packet) >= 0) {
                        /*
                         * Now we have a packet, let's see if it belongs to our video stream
                         */
                        if (packet.getStreamIndex() == videoStreamId) {
                            /*
                             * We allocate a new picture to get the data out of Xuggler
                             */
                            IVideoPicture picture = IVideoPicture.make(videoCoder.getPixelType(),
                                    videoCoder.getWidth(), videoCoder.getHeight());

                            int offset = 0;
                            while (offset < packet.getSize()) {
                                /*
                                 * Now, we decode the video, checking for any errors.
                                 *
                                 */
                                int bytesDecoded = videoCoder.decodeVideo(picture, packet, offset);
                                if (bytesDecoded < 0) {
                                    throw new RuntimeException("got error decoding video in: "
                                            + filename);
                                }
                                offset += bytesDecoded;

                                /*
                                 * Some decoders will consume data in a packet, but will not be able to construct
                                 * a full video picture yet.  Therefore you should always check if you
                                 * got a complete picture from the decoder
                                 */
                                if (picture.isComplete()) {
                                    IVideoPicture newPic = picture;
                                    /*
                                     * If the resampler is not null, that means we didn't get the
                                     * video in BGR24 format and
                                     * need to convert it into BGR24 format.
                                     */
                                    if (resampler != null) {
                                        // we must resample
                                        newPic = IVideoPicture.make(resampler.getOutputPixelFormat(),
                                                picture.getWidth(), picture.getHeight());
                                        if (resampler.resample(newPic, picture) < 0) {
                                            throw new RuntimeException("could not resample video from: "
                                                    + filename);
                                        }
                                    }
                                    if (newPic.getPixelType() != IPixelFormat.Type.BGR24) {
                                        throw new RuntimeException("could not decode video"
                                                + " as BGR 24 bit data in: " + filename);
                                    }

                                    /**
                                     * We could just display the images as
                                     * quickly as we decode them, but it turns
                                     * out we can decode a lot faster than you
                                     * think.
                                     *
                                     * So instead, the following code does a
                                     * poor-man's version of trying to match up
                                     * the frame-rate requested for each
                                     * IVideoPicture with the system clock time
                                     * on your computer.
                                     *
                                     * Remember that all Xuggler IAudioSamples
                                     * and IVideoPicture objects always give
                                     * timestamps in Microseconds, relative to
                                     * the first decoded item. If instead you
                                     * used the packet timestamps, they can be
                                     * in different units depending on your
                                     * IContainer, and IStream and things can
                                     * get hairy quickly.
                                     */
                                    if (firstTimestampInStream == Global.NO_PTS) {
                                        // This is our first time through
                                        firstTimestampInStream = picture.getTimeStamp();
                                        // get the starting clock time so we can hold up frames
                                        // until the right time.
                                        systemClockStartTime = System.currentTimeMillis();
                                    } else {
                                        long systemClockCurrentTime = System.currentTimeMillis();
                                        long millisecondsClockTimeSinceStartofVideo =
                                                systemClockCurrentTime - systemClockStartTime;
                                        // compute how long for this frame since the first frame in the
                                        // stream.
                                        // remember that IVideoPicture and IAudioSamples timestamps are
                                        // always in MICROSECONDS,
                                        // so we divide by 1000 to get milliseconds.
                                        long millisecondsStreamTimeSinceStartOfVideo =
                                                (picture.getTimeStamp() - firstTimestampInStream) / 1000;
                                        final long millisecondsTolerance = 50; // and we give ourselfs 50 ms of tolerance
                                        final long millisecondsToSleep =
                                                (millisecondsStreamTimeSinceStartOfVideo
                                                - (millisecondsClockTimeSinceStartofVideo
                                                + millisecondsTolerance));
                                        if (millisecondsToSleep > 0) {
//                                            try {
//                                                Thread.sleep(millisecondsToSleep);
//                                            } catch (InterruptedException e2) {
//                                                // we might get this when the user closes the dialog box, so
//                                                // just return from the method.
//                                                return;
//                                            }
                                        }
                                    }

                                    // And finally, convert the BGR24 to an Java buffered image
                                    BufferedImage javaImage = myConverter.toImage(newPic);
                                    if(toIgnore.getAndDecrement()<0){
                                    frames.put(javaImage);
                                    }
                                }
                            }
                        } else {
                            /*
                             * This packet isn't part of our video stream, so we just
                             * silently drop it.
                             */
                            do {
                            } while (false);
                        }

                    }
                    

                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        });

        t.start();


        final Mask mask = Mask.newGaussianMask(5, 5);

        final CountDownLatch latch = new CountDownLatch(1);

        new Thread(new Runnable() {
            double[] avgIn = null;
            EasyImage img = null;

            @Override
            public void run() {
                try {
                    do {


                        BufferedImage javaImage = frames.poll(1, TimeUnit.MINUTES);
//                                frames.clear();
                        
                        if (img == null) {
                            img = new EasyImage(javaImage);
                        } else {
                            img.reuse(javaImage);
                        }


                        if (firstCall) {
                            
                            w.setSize(img.getWidth() + 50, img.getHeight() + 50);
                            panel.loadImage(img);
                            panel.setImage(img);
                            firstCall = false;
                            panel.setVisible(true);
                            panel.setWorkingImage(img);
                            panel.repaint();
                            TrackingDialog trackingDialog = new TrackingDialog(panel);
                            trackingDialog.setVisible(true);
                            trackingDialog.setOnClick(new Runnable() {
                                @Override
                                public void run() {
                                    firstCall = false;
                                    latch.countDown();
                                }
                            });
                            latch.await();
                            
                        } else {
                            
                            panel.setWorkingImage(img.clone());
                            img.applyMask(mask);
                            img.tracking(panel.getDrawingContainer(), panel, false);
                            
                        }


                    } while (true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }//GEN-LAST:event_trackingVideoActionPerformed

    private void harrisCornersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harrisCornersActionPerformed
           final JFrame frame = new JFrame();
//        frame.getContentPane().add(lblimage, BorderLayout.CENTER);
//        frame.setSize(img.getWidth(), img.getHeight());
        frame.setVisible(true);
        frame.setTitle("Método de Harris");
        frame.setBounds(1, 1, 250, 230);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        frame.setLocation(size.width / 3 - getWidth() / 3, size.height / 3
                - getHeight() / 3);
        frame.setResizable(true);
        frame.setLayout(null);

        JPanel pan1 = new JPanel();
        pan1.setBorder(BorderFactory.createTitledBorder("Valores de máscara y sigma"));
        pan1.setBounds(0, 0, 250, 80);

        JPanel pan2 = new JPanel();
        pan2.setBorder(BorderFactory.createTitledBorder("Valores de umbral y k"));
        pan2.setBounds(0, 80, 250, 80);

        JLabel r1Label = new JLabel("size = ");
        final JTextField r1Field = new JTextField("3");
        r1Field.setColumns(3);

        JLabel r2Label = new JLabel("sigma = ");
        final JTextField r2Field = new JTextField("0.25");
        r2Field.setColumns(3);

        JLabel newR1Label = new JLabel("T = ");
        final JTextField y1Field = new JTextField("70");
        y1Field.setColumns(3);

        JLabel newR2Label = new JLabel("k = ");
        final JTextField y2Field = new JTextField("0.06");
        y2Field.setColumns(3);

        JButton okButton = new JButton("OK");
        okButton.setSize(250, 40);
        okButton.setBounds(0, 160, 250, 40);
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int r1;
                double r2;
                double y1;
                double y2;

                try {
                    r1 = Integer.valueOf(r1Field.getText());
                    r2 = Double.valueOf(r2Field.getText());
                    y1 = Double.valueOf(y1Field.getText());
                    y2 = Double.valueOf(y2Field.getText());

                } catch (NumberFormatException ex) {
                    System.out.println("Los datos ingresados son invalidos");
                    return;
                }


                img1.applyHarrisCornerDetector(r1, r2, y1, y2);
                displayImage(img1.getBufferedImage());
                frame.dispose();

            }
        });

        pan1.add(r1Label);
        pan1.add(r1Field);
        pan1.add(r2Label);
        pan1.add(r2Field);

        pan2.add(newR1Label);
        pan2.add(y1Field);
        pan2.add(newR2Label);
        pan2.add(y2Field);

        frame.add(pan1);
        frame.add(pan2);
        frame.add(okButton);
    }//GEN-LAST:event_harrisCornersActionPerformed

    private void singleSIFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleSIFTActionPerformed
         Vector<Feature> f1 = SIFT.getFeatures(img1.getBufferedImage());
         for(Feature f: f1){
             System.out.println("f: " + f.descriptor);
         }
         img1.detectFeatures();
         displayImage(img1.getBufferedImage());
    }//GEN-LAST:event_singleSIFTActionPerformed

    public void displayImage(BufferedImage img) {
        JFrame frame = new JFrame();
        JLabel lblimage = new JLabel(new ImageIcon(img));
        frame.getContentPane().add(lblimage, BorderLayout.CENTER);
        frame.setSize(img.getWidth() + 50, img.getHeight() + 50);
        frame.setVisible(true);
        frame.setResizable(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddExponential;
    private javax.swing.JMenuItem AddGauss;
    private javax.swing.JMenuItem AddRayleigh;
    private javax.swing.JMenuItem BWDegradee;
    private javax.swing.JMenuItem BWDegradee2;
    private javax.swing.JMenuItem BorderAmp;
    private javax.swing.JMenuItem Canny;
    private javax.swing.JMenuItem Circle;
    private javax.swing.JMenuItem Circle2;
    private javax.swing.JMenuItem ColorDegradee;
    private javax.swing.JMenuItem ColorDegradee2;
    private javax.swing.JMenuItem Contrast1;
    private javax.swing.JMenuItem Contrast2;
    private javax.swing.JMenuItem Copy2To1;
    private javax.swing.JMenuItem DRC1;
    private javax.swing.JMenuItem DRC2;
    private javax.swing.JMenuItem Equalize1;
    private javax.swing.JMenuItem Equalize2;
    private javax.swing.JMenuItem Exponential;
    private javax.swing.JMenuItem Gauss;
    private javax.swing.JMenuItem GaussianFilter;
    private javax.swing.JMenuItem GenHistorgram1;
    private javax.swing.JMenuItem GenHistorgram2;
    private javax.swing.JMenuItem GlobalUmbralization;
    private javax.swing.JMenuItem HistUmbral;
    private javax.swing.JMenuItem HoughLines;
    private javax.swing.JMenuItem HoughTransformCicles;
    private javax.swing.JMenu JMenu8;
    private javax.swing.JMenuItem Kirsh;
    private javax.swing.JMenuItem Laplace;
    private javax.swing.JMenuItem LaplaceGaussian;
    private javax.swing.JMenuItem LeclercAD;
    private javax.swing.JMenuItem LoadImg1;
    private javax.swing.JMenuItem LoadImg2;
    private javax.swing.JMenuItem LocalVarianceEval;
    private javax.swing.JMenuItem LorentzAD;
    private javax.swing.JMenuItem Mean;
    private javax.swing.JMenuItem MedianFilter;
    private javax.swing.JMenuItem Multiply1;
    private javax.swing.JMenuItem Multiply2;
    private javax.swing.JMenuItem NegativeImg1;
    private javax.swing.JMenuItem NegativeImg2;
    private javax.swing.JMenuItem NoMaxSupress;
    private javax.swing.JMenuItem Normalize1;
    private javax.swing.JMenuItem Normalize2;
    private javax.swing.JMenuItem Otsu;
    private javax.swing.JMenuItem Prewits;
    private javax.swing.JMenuItem Rayleigh;
    private javax.swing.JMenuItem Resta12;
    private javax.swing.JMenuItem Resta21;
    private javax.swing.JMenuItem Roberts;
    private javax.swing.JMenuItem SaltNPepper;
    private javax.swing.JMenuItem SaltNPepperBW;
    private javax.swing.JMenuItem Save1;
    private javax.swing.JMenuItem Save2;
    private javax.swing.JMenuItem SevenA;
    private javax.swing.JMenuItem SevenAV;
    private javax.swing.JMenuItem SevenAh;
    private javax.swing.JMenuItem SevenC;
    private javax.swing.JMenuItem SevenD;
    private javax.swing.JMenuItem Show1;
    private javax.swing.JMenuItem Show2;
    private javax.swing.JMenuItem Sobel;
    private javax.swing.JMenuItem Square;
    private javax.swing.JMenuItem Square2;
    private javax.swing.JMenuItem Suma;
    private javax.swing.JMenuItem SusanBorders;
    private javax.swing.JMenuItem SusanBoth;
    private javax.swing.JMenuItem SusanCorners;
    private javax.swing.JMenuItem SwapImgs;
    private javax.swing.JMenuItem Umbral1;
    private javax.swing.JMenuItem Umbral2;
    private javax.swing.JMenuItem ZeroCross;
    private javax.swing.JMenuItem getSubImage;
    private javax.swing.JMenuItem harrisCorners;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem singleSIFT;
    private javax.swing.JMenuItem toGrey1;
    private javax.swing.JMenuItem toGrey2;
    private javax.swing.JMenuItem trackingImage;
    private javax.swing.JMenuItem trackingVideo;
    // End of variables declaration//GEN-END:variables
}
